# coding: utf-8

"""
    Locationforecast

    Weather forecast for a specified place  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: weatherapi-adm@met.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def classic_format_get(self, lat, lon, format, **kwargs):  # noqa: E501
        """classic_format_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classic_format_get(lat, lon, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param str format: format code (file extension) (required)
        :param int altitude: Whole meters above sea level
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classic_format_get_with_http_info(lat, lon, format, **kwargs)  # noqa: E501
        else:
            (data) = self.classic_format_get_with_http_info(lat, lon, format, **kwargs)  # noqa: E501
            return data

    def classic_format_get_with_http_info(self, lat, lon, format, **kwargs):  # noqa: E501
        """classic_format_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classic_format_get_with_http_info(lat, lon, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param str format: format code (file extension) (required)
        :param int altitude: Whole meters above sea level
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lat', 'lon', 'format', 'altitude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classic_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in params or
                params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `classic_format_get`")  # noqa: E501
        # verify the required parameter 'lon' is set
        if ('lon' not in params or
                params['lon'] is None):
            raise ValueError("Missing the required parameter `lon` when calling `classic_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `classic_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'altitude' in params:
            query_params.append(('altitude', params['altitude']))  # noqa: E501
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/classic.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def classic_get(self, lat, lon, **kwargs):  # noqa: E501
        """classic_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classic_get(lat, lon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param int altitude: Whole meters above sea level
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classic_get_with_http_info(lat, lon, **kwargs)  # noqa: E501
        else:
            (data) = self.classic_get_with_http_info(lat, lon, **kwargs)  # noqa: E501
            return data

    def classic_get_with_http_info(self, lat, lon, **kwargs):  # noqa: E501
        """classic_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classic_get_with_http_info(lat, lon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param int altitude: Whole meters above sea level
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lat', 'lon', 'altitude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classic_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in params or
                params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `classic_get`")  # noqa: E501
        # verify the required parameter 'lon' is set
        if ('lon' not in params or
                params['lon'] is None):
            raise ValueError("Missing the required parameter `lon` when calling `classic_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'altitude' in params:
            query_params.append(('altitude', params['altitude']))  # noqa: E501
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/classic', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def compact_format_get(self, lat, lon, format, **kwargs):  # noqa: E501
        """compact_format_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compact_format_get(lat, lon, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param str format: format code (file extension) (required)
        :param int altitude: Whole meters above sea level
        :return: METJSONForecast
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.compact_format_get_with_http_info(lat, lon, format, **kwargs)  # noqa: E501
        else:
            (data) = self.compact_format_get_with_http_info(lat, lon, format, **kwargs)  # noqa: E501
            return data

    def compact_format_get_with_http_info(self, lat, lon, format, **kwargs):  # noqa: E501
        """compact_format_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compact_format_get_with_http_info(lat, lon, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param str format: format code (file extension) (required)
        :param int altitude: Whole meters above sea level
        :return: METJSONForecast
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lat', 'lon', 'format', 'altitude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compact_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in params or
                params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `compact_format_get`")  # noqa: E501
        # verify the required parameter 'lon' is set
        if ('lon' not in params or
                params['lon'] is None):
            raise ValueError("Missing the required parameter `lon` when calling `compact_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `compact_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'altitude' in params:
            query_params.append(('altitude', params['altitude']))  # noqa: E501
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/compact.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='METJSONForecast',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def compact_get(self, lat, lon, **kwargs):  # noqa: E501
        """compact_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compact_get(lat, lon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param int altitude: Whole meters above sea level
        :return: METJSONForecast
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.compact_get_with_http_info(lat, lon, **kwargs)  # noqa: E501
        else:
            (data) = self.compact_get_with_http_info(lat, lon, **kwargs)  # noqa: E501
            return data

    def compact_get_with_http_info(self, lat, lon, **kwargs):  # noqa: E501
        """compact_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compact_get_with_http_info(lat, lon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param int altitude: Whole meters above sea level
        :return: METJSONForecast
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lat', 'lon', 'altitude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compact_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in params or
                params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `compact_get`")  # noqa: E501
        # verify the required parameter 'lon' is set
        if ('lon' not in params or
                params['lon'] is None):
            raise ValueError("Missing the required parameter `lon` when calling `compact_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'altitude' in params:
            query_params.append(('altitude', params['altitude']))  # noqa: E501
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/compact', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='METJSONForecast',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def complete_format_get(self, lat, lon, format, **kwargs):  # noqa: E501
        """complete_format_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_format_get(lat, lon, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param str format: format code (file extension) (required)
        :param int altitude: Whole meters above sea level
        :return: METJSONForecast
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complete_format_get_with_http_info(lat, lon, format, **kwargs)  # noqa: E501
        else:
            (data) = self.complete_format_get_with_http_info(lat, lon, format, **kwargs)  # noqa: E501
            return data

    def complete_format_get_with_http_info(self, lat, lon, format, **kwargs):  # noqa: E501
        """complete_format_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_format_get_with_http_info(lat, lon, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param str format: format code (file extension) (required)
        :param int altitude: Whole meters above sea level
        :return: METJSONForecast
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lat', 'lon', 'format', 'altitude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complete_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in params or
                params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `complete_format_get`")  # noqa: E501
        # verify the required parameter 'lon' is set
        if ('lon' not in params or
                params['lon'] is None):
            raise ValueError("Missing the required parameter `lon` when calling `complete_format_get`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `complete_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []
        if 'altitude' in params:
            query_params.append(('altitude', params['altitude']))  # noqa: E501
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/complete.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='METJSONForecast',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def complete_get(self, lat, lon, **kwargs):  # noqa: E501
        """complete_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_get(lat, lon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param int altitude: Whole meters above sea level
        :return: METJSONForecast
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complete_get_with_http_info(lat, lon, **kwargs)  # noqa: E501
        else:
            (data) = self.complete_get_with_http_info(lat, lon, **kwargs)  # noqa: E501
            return data

    def complete_get_with_http_info(self, lat, lon, **kwargs):  # noqa: E501
        """complete_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_get_with_http_info(lat, lon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: Latitude (required)
        :param float lon: Longitude (required)
        :param int altitude: Whole meters above sea level
        :return: METJSONForecast
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lat', 'lon', 'altitude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complete_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in params or
                params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `complete_get`")  # noqa: E501
        # verify the required parameter 'lon' is set
        if ('lon' not in params or
                params['lon'] is None):
            raise ValueError("Missing the required parameter `lon` when calling `complete_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'altitude' in params:
            query_params.append(('altitude', params['altitude']))  # noqa: E501
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/complete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='METJSONForecast',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def status_format_get(self, format, **kwargs):  # noqa: E501
        """status_format_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_format_get(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: format code (file extension) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.status_format_get_with_http_info(format, **kwargs)  # noqa: E501
        else:
            (data) = self.status_format_get_with_http_info(format, **kwargs)  # noqa: E501
            return data

    def status_format_get_with_http_info(self, format, **kwargs):  # noqa: E501
        """status_format_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_format_get_with_http_info(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: format code (file extension) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status_format_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `status_format_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/status.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def status_get(self, **kwargs):  # noqa: E501
        """status_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def status_get_with_http_info(self, **kwargs):  # noqa: E501
        """status_get  # noqa: E501

        Weather forecast for a specified place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
