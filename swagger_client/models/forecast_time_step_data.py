# coding: utf-8

"""
    Locationforecast

    Weather forecast for a specified place  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: weatherapi-adm@met.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ForecastTimeStepData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instant': 'ForecastTimeStepDataInstant',
        'next_12_hours': 'ForecastTimeStepDataNext12Hours',
        'next_1_hours': 'ForecastTimeStepDataNext1Hours',
        'next_6_hours': 'ForecastTimeStepDataNext6Hours'
    }

    attribute_map = {
        'instant': 'instant',
        'next_12_hours': 'next_12_hours',
        'next_1_hours': 'next_1_hours',
        'next_6_hours': 'next_6_hours'
    }

    def __init__(self, instant=None, next_12_hours=None, next_1_hours=None, next_6_hours=None):  # noqa: E501
        """ForecastTimeStepData - a model defined in Swagger"""  # noqa: E501
        self._instant = None
        self._next_12_hours = None
        self._next_1_hours = None
        self._next_6_hours = None
        self.discriminator = None
        self.instant = instant
        if next_12_hours is not None:
            self.next_12_hours = next_12_hours
        if next_1_hours is not None:
            self.next_1_hours = next_1_hours
        if next_6_hours is not None:
            self.next_6_hours = next_6_hours

    @property
    def instant(self):
        """Gets the instant of this ForecastTimeStepData.  # noqa: E501


        :return: The instant of this ForecastTimeStepData.  # noqa: E501
        :rtype: ForecastTimeStepDataInstant
        """
        return self._instant

    @instant.setter
    def instant(self, instant):
        """Sets the instant of this ForecastTimeStepData.


        :param instant: The instant of this ForecastTimeStepData.  # noqa: E501
        :type: ForecastTimeStepDataInstant
        """
        if instant is None:
            raise ValueError("Invalid value for `instant`, must not be `None`")  # noqa: E501

        self._instant = instant

    @property
    def next_12_hours(self):
        """Gets the next_12_hours of this ForecastTimeStepData.  # noqa: E501


        :return: The next_12_hours of this ForecastTimeStepData.  # noqa: E501
        :rtype: ForecastTimeStepDataNext12Hours
        """
        return self._next_12_hours

    @next_12_hours.setter
    def next_12_hours(self, next_12_hours):
        """Sets the next_12_hours of this ForecastTimeStepData.


        :param next_12_hours: The next_12_hours of this ForecastTimeStepData.  # noqa: E501
        :type: ForecastTimeStepDataNext12Hours
        """

        self._next_12_hours = next_12_hours

    @property
    def next_1_hours(self):
        """Gets the next_1_hours of this ForecastTimeStepData.  # noqa: E501


        :return: The next_1_hours of this ForecastTimeStepData.  # noqa: E501
        :rtype: ForecastTimeStepDataNext1Hours
        """
        return self._next_1_hours

    @next_1_hours.setter
    def next_1_hours(self, next_1_hours):
        """Sets the next_1_hours of this ForecastTimeStepData.


        :param next_1_hours: The next_1_hours of this ForecastTimeStepData.  # noqa: E501
        :type: ForecastTimeStepDataNext1Hours
        """

        self._next_1_hours = next_1_hours

    @property
    def next_6_hours(self):
        """Gets the next_6_hours of this ForecastTimeStepData.  # noqa: E501


        :return: The next_6_hours of this ForecastTimeStepData.  # noqa: E501
        :rtype: ForecastTimeStepDataNext6Hours
        """
        return self._next_6_hours

    @next_6_hours.setter
    def next_6_hours(self, next_6_hours):
        """Sets the next_6_hours of this ForecastTimeStepData.


        :param next_6_hours: The next_6_hours of this ForecastTimeStepData.  # noqa: E501
        :type: ForecastTimeStepDataNext6Hours
        """

        self._next_6_hours = next_6_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForecastTimeStepData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForecastTimeStepData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
