# coding: utf-8

"""
    Locationforecast

    Weather forecast for a specified place  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: weatherapi-adm@met.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WeatherSymbol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CLEARSKY_DAY = "clearsky_day"
    CLEARSKY_NIGHT = "clearsky_night"
    CLEARSKY_POLARTWILIGHT = "clearsky_polartwilight"
    FAIR_DAY = "fair_day"
    FAIR_NIGHT = "fair_night"
    FAIR_POLARTWILIGHT = "fair_polartwilight"
    LIGHTSSNOWSHOWERSANDTHUNDER_DAY = "lightssnowshowersandthunder_day"
    LIGHTSSNOWSHOWERSANDTHUNDER_NIGHT = "lightssnowshowersandthunder_night"
    LIGHTSSNOWSHOWERSANDTHUNDER_POLARTWILIGHT = "lightssnowshowersandthunder_polartwilight"
    LIGHTSNOWSHOWERS_DAY = "lightsnowshowers_day"
    LIGHTSNOWSHOWERS_NIGHT = "lightsnowshowers_night"
    LIGHTSNOWSHOWERS_POLARTWILIGHT = "lightsnowshowers_polartwilight"
    HEAVYRAINANDTHUNDER = "heavyrainandthunder"
    HEAVYSNOWANDTHUNDER = "heavysnowandthunder"
    RAINANDTHUNDER = "rainandthunder"
    HEAVYSLEETSHOWERSANDTHUNDER_DAY = "heavysleetshowersandthunder_day"
    HEAVYSLEETSHOWERSANDTHUNDER_NIGHT = "heavysleetshowersandthunder_night"
    HEAVYSLEETSHOWERSANDTHUNDER_POLARTWILIGHT = "heavysleetshowersandthunder_polartwilight"
    HEAVYSNOW = "heavysnow"
    HEAVYRAINSHOWERS_DAY = "heavyrainshowers_day"
    HEAVYRAINSHOWERS_NIGHT = "heavyrainshowers_night"
    HEAVYRAINSHOWERS_POLARTWILIGHT = "heavyrainshowers_polartwilight"
    LIGHTSLEET = "lightsleet"
    HEAVYRAIN = "heavyrain"
    LIGHTRAINSHOWERS_DAY = "lightrainshowers_day"
    LIGHTRAINSHOWERS_NIGHT = "lightrainshowers_night"
    LIGHTRAINSHOWERS_POLARTWILIGHT = "lightrainshowers_polartwilight"
    HEAVYSLEETSHOWERS_DAY = "heavysleetshowers_day"
    HEAVYSLEETSHOWERS_NIGHT = "heavysleetshowers_night"
    HEAVYSLEETSHOWERS_POLARTWILIGHT = "heavysleetshowers_polartwilight"
    LIGHTSLEETSHOWERS_DAY = "lightsleetshowers_day"
    LIGHTSLEETSHOWERS_NIGHT = "lightsleetshowers_night"
    LIGHTSLEETSHOWERS_POLARTWILIGHT = "lightsleetshowers_polartwilight"
    SNOW = "snow"
    HEAVYRAINSHOWERSANDTHUNDER_DAY = "heavyrainshowersandthunder_day"
    HEAVYRAINSHOWERSANDTHUNDER_NIGHT = "heavyrainshowersandthunder_night"
    HEAVYRAINSHOWERSANDTHUNDER_POLARTWILIGHT = "heavyrainshowersandthunder_polartwilight"
    SNOWSHOWERS_DAY = "snowshowers_day"
    SNOWSHOWERS_NIGHT = "snowshowers_night"
    SNOWSHOWERS_POLARTWILIGHT = "snowshowers_polartwilight"
    FOG = "fog"
    SNOWSHOWERSANDTHUNDER_DAY = "snowshowersandthunder_day"
    SNOWSHOWERSANDTHUNDER_NIGHT = "snowshowersandthunder_night"
    SNOWSHOWERSANDTHUNDER_POLARTWILIGHT = "snowshowersandthunder_polartwilight"
    LIGHTSNOWANDTHUNDER = "lightsnowandthunder"
    HEAVYSLEETANDTHUNDER = "heavysleetandthunder"
    LIGHTRAIN = "lightrain"
    RAINSHOWERSANDTHUNDER_DAY = "rainshowersandthunder_day"
    RAINSHOWERSANDTHUNDER_NIGHT = "rainshowersandthunder_night"
    RAINSHOWERSANDTHUNDER_POLARTWILIGHT = "rainshowersandthunder_polartwilight"
    RAIN = "rain"
    LIGHTSNOW = "lightsnow"
    LIGHTRAINSHOWERSANDTHUNDER_DAY = "lightrainshowersandthunder_day"
    LIGHTRAINSHOWERSANDTHUNDER_NIGHT = "lightrainshowersandthunder_night"
    LIGHTRAINSHOWERSANDTHUNDER_POLARTWILIGHT = "lightrainshowersandthunder_polartwilight"
    HEAVYSLEET = "heavysleet"
    SLEETANDTHUNDER = "sleetandthunder"
    LIGHTRAINANDTHUNDER = "lightrainandthunder"
    SLEET = "sleet"
    LIGHTSSLEETSHOWERSANDTHUNDER_DAY = "lightssleetshowersandthunder_day"
    LIGHTSSLEETSHOWERSANDTHUNDER_NIGHT = "lightssleetshowersandthunder_night"
    LIGHTSSLEETSHOWERSANDTHUNDER_POLARTWILIGHT = "lightssleetshowersandthunder_polartwilight"
    LIGHTSLEETANDTHUNDER = "lightsleetandthunder"
    PARTLYCLOUDY_DAY = "partlycloudy_day"
    PARTLYCLOUDY_NIGHT = "partlycloudy_night"
    PARTLYCLOUDY_POLARTWILIGHT = "partlycloudy_polartwilight"
    SLEETSHOWERSANDTHUNDER_DAY = "sleetshowersandthunder_day"
    SLEETSHOWERSANDTHUNDER_NIGHT = "sleetshowersandthunder_night"
    SLEETSHOWERSANDTHUNDER_POLARTWILIGHT = "sleetshowersandthunder_polartwilight"
    RAINSHOWERS_DAY = "rainshowers_day"
    RAINSHOWERS_NIGHT = "rainshowers_night"
    RAINSHOWERS_POLARTWILIGHT = "rainshowers_polartwilight"
    SNOWANDTHUNDER = "snowandthunder"
    SLEETSHOWERS_DAY = "sleetshowers_day"
    SLEETSHOWERS_NIGHT = "sleetshowers_night"
    SLEETSHOWERS_POLARTWILIGHT = "sleetshowers_polartwilight"
    CLOUDY = "cloudy"
    HEAVYSNOWSHOWERSANDTHUNDER_DAY = "heavysnowshowersandthunder_day"
    HEAVYSNOWSHOWERSANDTHUNDER_NIGHT = "heavysnowshowersandthunder_night"
    HEAVYSNOWSHOWERSANDTHUNDER_POLARTWILIGHT = "heavysnowshowersandthunder_polartwilight"
    HEAVYSNOWSHOWERS_DAY = "heavysnowshowers_day"
    HEAVYSNOWSHOWERS_NIGHT = "heavysnowshowers_night"
    HEAVYSNOWSHOWERS_POLARTWILIGHT = "heavysnowshowers_polartwilight"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """WeatherSymbol - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeatherSymbol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeatherSymbol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
