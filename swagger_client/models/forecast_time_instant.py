# coding: utf-8

"""
    Locationforecast

    Weather forecast for a specified place  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: weatherapi-adm@met.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ForecastTimeInstant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'air_pressure_at_sea_level': 'float',
        'air_temperature': 'float',
        'cloud_area_fraction': 'float',
        'cloud_area_fraction_high': 'float',
        'cloud_area_fraction_low': 'float',
        'cloud_area_fraction_medium': 'float',
        'dew_point_temperature': 'float',
        'fog_area_fraction': 'float',
        'relative_humidity': 'float',
        'wind_from_direction': 'float',
        'wind_speed': 'float',
        'wind_speed_of_gust': 'float'
    }

    attribute_map = {
        'air_pressure_at_sea_level': 'air_pressure_at_sea_level',
        'air_temperature': 'air_temperature',
        'cloud_area_fraction': 'cloud_area_fraction',
        'cloud_area_fraction_high': 'cloud_area_fraction_high',
        'cloud_area_fraction_low': 'cloud_area_fraction_low',
        'cloud_area_fraction_medium': 'cloud_area_fraction_medium',
        'dew_point_temperature': 'dew_point_temperature',
        'fog_area_fraction': 'fog_area_fraction',
        'relative_humidity': 'relative_humidity',
        'wind_from_direction': 'wind_from_direction',
        'wind_speed': 'wind_speed',
        'wind_speed_of_gust': 'wind_speed_of_gust'
    }

    def __init__(self, air_pressure_at_sea_level=None, air_temperature=None, cloud_area_fraction=None, cloud_area_fraction_high=None, cloud_area_fraction_low=None, cloud_area_fraction_medium=None, dew_point_temperature=None, fog_area_fraction=None, relative_humidity=None, wind_from_direction=None, wind_speed=None, wind_speed_of_gust=None):  # noqa: E501
        """ForecastTimeInstant - a model defined in Swagger"""  # noqa: E501
        self._air_pressure_at_sea_level = None
        self._air_temperature = None
        self._cloud_area_fraction = None
        self._cloud_area_fraction_high = None
        self._cloud_area_fraction_low = None
        self._cloud_area_fraction_medium = None
        self._dew_point_temperature = None
        self._fog_area_fraction = None
        self._relative_humidity = None
        self._wind_from_direction = None
        self._wind_speed = None
        self._wind_speed_of_gust = None
        self.discriminator = None
        if air_pressure_at_sea_level is not None:
            self.air_pressure_at_sea_level = air_pressure_at_sea_level
        if air_temperature is not None:
            self.air_temperature = air_temperature
        if cloud_area_fraction is not None:
            self.cloud_area_fraction = cloud_area_fraction
        if cloud_area_fraction_high is not None:
            self.cloud_area_fraction_high = cloud_area_fraction_high
        if cloud_area_fraction_low is not None:
            self.cloud_area_fraction_low = cloud_area_fraction_low
        if cloud_area_fraction_medium is not None:
            self.cloud_area_fraction_medium = cloud_area_fraction_medium
        if dew_point_temperature is not None:
            self.dew_point_temperature = dew_point_temperature
        if fog_area_fraction is not None:
            self.fog_area_fraction = fog_area_fraction
        if relative_humidity is not None:
            self.relative_humidity = relative_humidity
        if wind_from_direction is not None:
            self.wind_from_direction = wind_from_direction
        if wind_speed is not None:
            self.wind_speed = wind_speed
        if wind_speed_of_gust is not None:
            self.wind_speed_of_gust = wind_speed_of_gust

    @property
    def air_pressure_at_sea_level(self):
        """Gets the air_pressure_at_sea_level of this ForecastTimeInstant.  # noqa: E501

        Air pressure at sea level  # noqa: E501

        :return: The air_pressure_at_sea_level of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._air_pressure_at_sea_level

    @air_pressure_at_sea_level.setter
    def air_pressure_at_sea_level(self, air_pressure_at_sea_level):
        """Sets the air_pressure_at_sea_level of this ForecastTimeInstant.

        Air pressure at sea level  # noqa: E501

        :param air_pressure_at_sea_level: The air_pressure_at_sea_level of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._air_pressure_at_sea_level = air_pressure_at_sea_level

    @property
    def air_temperature(self):
        """Gets the air_temperature of this ForecastTimeInstant.  # noqa: E501

        Air temperature  # noqa: E501

        :return: The air_temperature of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._air_temperature

    @air_temperature.setter
    def air_temperature(self, air_temperature):
        """Sets the air_temperature of this ForecastTimeInstant.

        Air temperature  # noqa: E501

        :param air_temperature: The air_temperature of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._air_temperature = air_temperature

    @property
    def cloud_area_fraction(self):
        """Gets the cloud_area_fraction of this ForecastTimeInstant.  # noqa: E501

        Amount of sky covered by clouds.  # noqa: E501

        :return: The cloud_area_fraction of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._cloud_area_fraction

    @cloud_area_fraction.setter
    def cloud_area_fraction(self, cloud_area_fraction):
        """Sets the cloud_area_fraction of this ForecastTimeInstant.

        Amount of sky covered by clouds.  # noqa: E501

        :param cloud_area_fraction: The cloud_area_fraction of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._cloud_area_fraction = cloud_area_fraction

    @property
    def cloud_area_fraction_high(self):
        """Gets the cloud_area_fraction_high of this ForecastTimeInstant.  # noqa: E501

        Amount of sky covered by clouds at high elevation.  # noqa: E501

        :return: The cloud_area_fraction_high of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._cloud_area_fraction_high

    @cloud_area_fraction_high.setter
    def cloud_area_fraction_high(self, cloud_area_fraction_high):
        """Sets the cloud_area_fraction_high of this ForecastTimeInstant.

        Amount of sky covered by clouds at high elevation.  # noqa: E501

        :param cloud_area_fraction_high: The cloud_area_fraction_high of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._cloud_area_fraction_high = cloud_area_fraction_high

    @property
    def cloud_area_fraction_low(self):
        """Gets the cloud_area_fraction_low of this ForecastTimeInstant.  # noqa: E501

        Amount of sky covered by clouds at low elevation.  # noqa: E501

        :return: The cloud_area_fraction_low of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._cloud_area_fraction_low

    @cloud_area_fraction_low.setter
    def cloud_area_fraction_low(self, cloud_area_fraction_low):
        """Sets the cloud_area_fraction_low of this ForecastTimeInstant.

        Amount of sky covered by clouds at low elevation.  # noqa: E501

        :param cloud_area_fraction_low: The cloud_area_fraction_low of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._cloud_area_fraction_low = cloud_area_fraction_low

    @property
    def cloud_area_fraction_medium(self):
        """Gets the cloud_area_fraction_medium of this ForecastTimeInstant.  # noqa: E501

        Amount of sky covered by clouds at medium elevation.  # noqa: E501

        :return: The cloud_area_fraction_medium of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._cloud_area_fraction_medium

    @cloud_area_fraction_medium.setter
    def cloud_area_fraction_medium(self, cloud_area_fraction_medium):
        """Sets the cloud_area_fraction_medium of this ForecastTimeInstant.

        Amount of sky covered by clouds at medium elevation.  # noqa: E501

        :param cloud_area_fraction_medium: The cloud_area_fraction_medium of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._cloud_area_fraction_medium = cloud_area_fraction_medium

    @property
    def dew_point_temperature(self):
        """Gets the dew_point_temperature of this ForecastTimeInstant.  # noqa: E501

        Dew point temperature at sea level  # noqa: E501

        :return: The dew_point_temperature of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._dew_point_temperature

    @dew_point_temperature.setter
    def dew_point_temperature(self, dew_point_temperature):
        """Sets the dew_point_temperature of this ForecastTimeInstant.

        Dew point temperature at sea level  # noqa: E501

        :param dew_point_temperature: The dew_point_temperature of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._dew_point_temperature = dew_point_temperature

    @property
    def fog_area_fraction(self):
        """Gets the fog_area_fraction of this ForecastTimeInstant.  # noqa: E501

        Amount of area covered by fog.  # noqa: E501

        :return: The fog_area_fraction of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._fog_area_fraction

    @fog_area_fraction.setter
    def fog_area_fraction(self, fog_area_fraction):
        """Sets the fog_area_fraction of this ForecastTimeInstant.

        Amount of area covered by fog.  # noqa: E501

        :param fog_area_fraction: The fog_area_fraction of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._fog_area_fraction = fog_area_fraction

    @property
    def relative_humidity(self):
        """Gets the relative_humidity of this ForecastTimeInstant.  # noqa: E501

        Amount of humidity in the air.  # noqa: E501

        :return: The relative_humidity of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._relative_humidity

    @relative_humidity.setter
    def relative_humidity(self, relative_humidity):
        """Sets the relative_humidity of this ForecastTimeInstant.

        Amount of humidity in the air.  # noqa: E501

        :param relative_humidity: The relative_humidity of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._relative_humidity = relative_humidity

    @property
    def wind_from_direction(self):
        """Gets the wind_from_direction of this ForecastTimeInstant.  # noqa: E501

        The directon which moves towards  # noqa: E501

        :return: The wind_from_direction of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._wind_from_direction

    @wind_from_direction.setter
    def wind_from_direction(self, wind_from_direction):
        """Sets the wind_from_direction of this ForecastTimeInstant.

        The directon which moves towards  # noqa: E501

        :param wind_from_direction: The wind_from_direction of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._wind_from_direction = wind_from_direction

    @property
    def wind_speed(self):
        """Gets the wind_speed of this ForecastTimeInstant.  # noqa: E501

        Speed of wind  # noqa: E501

        :return: The wind_speed of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this ForecastTimeInstant.

        Speed of wind  # noqa: E501

        :param wind_speed: The wind_speed of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._wind_speed = wind_speed

    @property
    def wind_speed_of_gust(self):
        """Gets the wind_speed_of_gust of this ForecastTimeInstant.  # noqa: E501

        Speed of wind gust  # noqa: E501

        :return: The wind_speed_of_gust of this ForecastTimeInstant.  # noqa: E501
        :rtype: float
        """
        return self._wind_speed_of_gust

    @wind_speed_of_gust.setter
    def wind_speed_of_gust(self, wind_speed_of_gust):
        """Sets the wind_speed_of_gust of this ForecastTimeInstant.

        Speed of wind gust  # noqa: E501

        :param wind_speed_of_gust: The wind_speed_of_gust of this ForecastTimeInstant.  # noqa: E501
        :type: float
        """

        self._wind_speed_of_gust = wind_speed_of_gust

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForecastTimeInstant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForecastTimeInstant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
