# coding: utf-8

"""
    Locationforecast

    Weather forecast for a specified place  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: weatherapi-adm@met.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ForecastTimePeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'air_temperature_max': 'float',
        'air_temperature_min': 'float',
        'precipitation_amount': 'float',
        'precipitation_amount_max': 'float',
        'precipitation_amount_min': 'float',
        'probability_of_precipitation': 'float',
        'probability_of_thunder': 'float',
        'ultraviolet_index_clear_sky_max': 'float'
    }

    attribute_map = {
        'air_temperature_max': 'air_temperature_max',
        'air_temperature_min': 'air_temperature_min',
        'precipitation_amount': 'precipitation_amount',
        'precipitation_amount_max': 'precipitation_amount_max',
        'precipitation_amount_min': 'precipitation_amount_min',
        'probability_of_precipitation': 'probability_of_precipitation',
        'probability_of_thunder': 'probability_of_thunder',
        'ultraviolet_index_clear_sky_max': 'ultraviolet_index_clear_sky_max'
    }

    def __init__(self, air_temperature_max=None, air_temperature_min=None, precipitation_amount=None, precipitation_amount_max=None, precipitation_amount_min=None, probability_of_precipitation=None, probability_of_thunder=None, ultraviolet_index_clear_sky_max=None):  # noqa: E501
        """ForecastTimePeriod - a model defined in Swagger"""  # noqa: E501
        self._air_temperature_max = None
        self._air_temperature_min = None
        self._precipitation_amount = None
        self._precipitation_amount_max = None
        self._precipitation_amount_min = None
        self._probability_of_precipitation = None
        self._probability_of_thunder = None
        self._ultraviolet_index_clear_sky_max = None
        self.discriminator = None
        if air_temperature_max is not None:
            self.air_temperature_max = air_temperature_max
        if air_temperature_min is not None:
            self.air_temperature_min = air_temperature_min
        if precipitation_amount is not None:
            self.precipitation_amount = precipitation_amount
        if precipitation_amount_max is not None:
            self.precipitation_amount_max = precipitation_amount_max
        if precipitation_amount_min is not None:
            self.precipitation_amount_min = precipitation_amount_min
        if probability_of_precipitation is not None:
            self.probability_of_precipitation = probability_of_precipitation
        if probability_of_thunder is not None:
            self.probability_of_thunder = probability_of_thunder
        if ultraviolet_index_clear_sky_max is not None:
            self.ultraviolet_index_clear_sky_max = ultraviolet_index_clear_sky_max

    @property
    def air_temperature_max(self):
        """Gets the air_temperature_max of this ForecastTimePeriod.  # noqa: E501

        Maximum air temperature in period  # noqa: E501

        :return: The air_temperature_max of this ForecastTimePeriod.  # noqa: E501
        :rtype: float
        """
        return self._air_temperature_max

    @air_temperature_max.setter
    def air_temperature_max(self, air_temperature_max):
        """Sets the air_temperature_max of this ForecastTimePeriod.

        Maximum air temperature in period  # noqa: E501

        :param air_temperature_max: The air_temperature_max of this ForecastTimePeriod.  # noqa: E501
        :type: float
        """

        self._air_temperature_max = air_temperature_max

    @property
    def air_temperature_min(self):
        """Gets the air_temperature_min of this ForecastTimePeriod.  # noqa: E501

        Minimum air temperature in period  # noqa: E501

        :return: The air_temperature_min of this ForecastTimePeriod.  # noqa: E501
        :rtype: float
        """
        return self._air_temperature_min

    @air_temperature_min.setter
    def air_temperature_min(self, air_temperature_min):
        """Sets the air_temperature_min of this ForecastTimePeriod.

        Minimum air temperature in period  # noqa: E501

        :param air_temperature_min: The air_temperature_min of this ForecastTimePeriod.  # noqa: E501
        :type: float
        """

        self._air_temperature_min = air_temperature_min

    @property
    def precipitation_amount(self):
        """Gets the precipitation_amount of this ForecastTimePeriod.  # noqa: E501

        Best estimate for amount of precipitation for this period  # noqa: E501

        :return: The precipitation_amount of this ForecastTimePeriod.  # noqa: E501
        :rtype: float
        """
        return self._precipitation_amount

    @precipitation_amount.setter
    def precipitation_amount(self, precipitation_amount):
        """Sets the precipitation_amount of this ForecastTimePeriod.

        Best estimate for amount of precipitation for this period  # noqa: E501

        :param precipitation_amount: The precipitation_amount of this ForecastTimePeriod.  # noqa: E501
        :type: float
        """

        self._precipitation_amount = precipitation_amount

    @property
    def precipitation_amount_max(self):
        """Gets the precipitation_amount_max of this ForecastTimePeriod.  # noqa: E501

        Maximum amount of precipitation for this period  # noqa: E501

        :return: The precipitation_amount_max of this ForecastTimePeriod.  # noqa: E501
        :rtype: float
        """
        return self._precipitation_amount_max

    @precipitation_amount_max.setter
    def precipitation_amount_max(self, precipitation_amount_max):
        """Sets the precipitation_amount_max of this ForecastTimePeriod.

        Maximum amount of precipitation for this period  # noqa: E501

        :param precipitation_amount_max: The precipitation_amount_max of this ForecastTimePeriod.  # noqa: E501
        :type: float
        """

        self._precipitation_amount_max = precipitation_amount_max

    @property
    def precipitation_amount_min(self):
        """Gets the precipitation_amount_min of this ForecastTimePeriod.  # noqa: E501

        Minimum amount of precipitation for this period  # noqa: E501

        :return: The precipitation_amount_min of this ForecastTimePeriod.  # noqa: E501
        :rtype: float
        """
        return self._precipitation_amount_min

    @precipitation_amount_min.setter
    def precipitation_amount_min(self, precipitation_amount_min):
        """Sets the precipitation_amount_min of this ForecastTimePeriod.

        Minimum amount of precipitation for this period  # noqa: E501

        :param precipitation_amount_min: The precipitation_amount_min of this ForecastTimePeriod.  # noqa: E501
        :type: float
        """

        self._precipitation_amount_min = precipitation_amount_min

    @property
    def probability_of_precipitation(self):
        """Gets the probability_of_precipitation of this ForecastTimePeriod.  # noqa: E501

        Probability of any precipitation coming for this period  # noqa: E501

        :return: The probability_of_precipitation of this ForecastTimePeriod.  # noqa: E501
        :rtype: float
        """
        return self._probability_of_precipitation

    @probability_of_precipitation.setter
    def probability_of_precipitation(self, probability_of_precipitation):
        """Sets the probability_of_precipitation of this ForecastTimePeriod.

        Probability of any precipitation coming for this period  # noqa: E501

        :param probability_of_precipitation: The probability_of_precipitation of this ForecastTimePeriod.  # noqa: E501
        :type: float
        """

        self._probability_of_precipitation = probability_of_precipitation

    @property
    def probability_of_thunder(self):
        """Gets the probability_of_thunder of this ForecastTimePeriod.  # noqa: E501

        Probability of any thunder coming for this period  # noqa: E501

        :return: The probability_of_thunder of this ForecastTimePeriod.  # noqa: E501
        :rtype: float
        """
        return self._probability_of_thunder

    @probability_of_thunder.setter
    def probability_of_thunder(self, probability_of_thunder):
        """Sets the probability_of_thunder of this ForecastTimePeriod.

        Probability of any thunder coming for this period  # noqa: E501

        :param probability_of_thunder: The probability_of_thunder of this ForecastTimePeriod.  # noqa: E501
        :type: float
        """

        self._probability_of_thunder = probability_of_thunder

    @property
    def ultraviolet_index_clear_sky_max(self):
        """Gets the ultraviolet_index_clear_sky_max of this ForecastTimePeriod.  # noqa: E501

        Maximum ultraviolet index if sky is clear  # noqa: E501

        :return: The ultraviolet_index_clear_sky_max of this ForecastTimePeriod.  # noqa: E501
        :rtype: float
        """
        return self._ultraviolet_index_clear_sky_max

    @ultraviolet_index_clear_sky_max.setter
    def ultraviolet_index_clear_sky_max(self, ultraviolet_index_clear_sky_max):
        """Sets the ultraviolet_index_clear_sky_max of this ForecastTimePeriod.

        Maximum ultraviolet index if sky is clear  # noqa: E501

        :param ultraviolet_index_clear_sky_max: The ultraviolet_index_clear_sky_max of this ForecastTimePeriod.  # noqa: E501
        :type: float
        """

        self._ultraviolet_index_clear_sky_max = ultraviolet_index_clear_sky_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForecastTimePeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForecastTimePeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
